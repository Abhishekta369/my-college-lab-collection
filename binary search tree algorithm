main
    step 1:start
    step 2:print the menu
    step 3:repeat steps 4 to 5
    step 4:read the choice
    step 5:call insert() if choice =1
           call delete() if choice =2
           call inorder(root) if choice=3
           call preorder(root) if choice=4
           call postorder(root) if choice=5
           exit the program if choice=6
    step 6:stop
    

insert()
    step 1: newnode=create newnode
    step 2: read the value to insert -a
    step 3: newnode->data=a
    step 4: newnode->left=newnode->right=NULL
    step 5: if root=NULL goto step 6 else step 7
    step 6: root=newnode goto step 
    step 7: traverse the tree until the appropriate node is found
    step 8: add the newnode to the tree
    step 9: return to main

delete()
    step 1: read the value to delete
    step 2: find the node to delete ,if node not found goto step 12
    step 3: check for the no of children for the node
    step 4: if node has one child goto step 5
    step 5: free the node goto step 13
    step 6: if the node has 1 child goto step 7
    step 7: copy the data in child to parent and free the child and goto step 13
    step 8: if the node has 2 children goto step 9 
    step 9: find the immediate inorder predecessor or successor 
    step 10: copy the contents of the successor/predecessor to the node to be deleted
    step 11: free the successor/predecessor node and goto step 13
    step 12: print node not found
    step 13: return to main

inorder(*root)
    step 1: if root=NULL return to function call else step 2
    step 2: inorder(root->left)
    step 3: print root->data
    step 4: inorder(root->right)

preorder(*root)
    step 1: if root=NULL return to function call else step 2
    step 2: print root->data
    step 3: preorder(root->left)
    step 4: preorder(root->right)

postorder(*root)
    step 1: if root=NULL return to function call else step 2
    step 2: postorder(root->left)
    step 3: postorder(root->right)
    step 4: printroot->data

