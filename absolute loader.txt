1.  Pass 2 of 2 pass assembler
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
void display();
int main()
{
    char label[10], opcode[10], operand[10], symbol[10],s[10],s1[10];
    int start, diff, i, address, add, len, actual_len, finaddr, prevaddr, j = 0;
    char mnemonic[15];
    char code[15];
    FILE *fp1, *fp2, *fp3, *fp4,*fp5;
    fp1 = fopen("output.txt", "w");
    fp3 = fopen("intermediate.txt", "r");
    fp4 = fopen("objcode.txt", "w");
    fscanf(fp3, "%s\t%s\t%s", label, opcode, operand);
    //find length of the program
    while (strcmp(opcode, "END") != 0)
    {
        prevaddr = address;
        fscanf(fp3, "%d%s%s%s", &address, label, opcode, operand);
    }
    finaddr = address;
    fclose(fp3);
    fp3 = fopen("intermediate.txt", "r");
    fscanf(fp3, "\t%s\t%s\t%s", label, opcode, operand);
    if (strcmp(opcode, "START") == 0)
    {
        fprintf(fp1, "\t%s\t%s\t%s\n", label, opcode, operand);
        fprintf(fp4, "H^%s^00%s^00%d\n", label, operand, finaddr);
        fscanf(fp3, "%d%s%s%s", &address, label, opcode, operand);
        start = address;
        diff = prevaddr - start;
        fprintf(fp4, "T^00%d^%d", address, diff);
    }
    while (strcmp(opcode, "END") != 0)
    {
        if (strcmp(opcode, "BYTE") == 0)
        {
            fprintf(fp1, "%d\t%s\t%s\t%s\t", address, label, opcode, operand);
            len = strlen(operand);
            actual_len = len - 3;
            fprintf(fp4, "^");
            for (i = 2; i < (actual_len + 2); i++)
            {   
                    sprintf(s, "%x", toascii(operand[i]));
                fprintf(fp1, "%s", s);
                fprintf(fp4, "%s", s);
                strcpy(s,"");
            }
            fprintf(fp1, "\n");
        }
        else if (strcmp(opcode, "WORD") == 0)
        {
            len = strlen(operand);
            sprintf(s1, "%s", (operand));
            fprintf(fp1, "%d\t%s\t%s\t%s\t00000%s\n", address, label, opcode, operand, s1);
            fprintf(fp4, "^00000%s", s1);
        }
        else if ((strcmp(opcode, "RESB") == 0) || (strcmp(opcode, "RESW") == 0))
        {
            fprintf(fp1, "%d\t%s\t%s\t%s\n", address, label, opcode, operand);
        }
        else
        {
                fp2 = fopen("symtab.txt", "r");
                fp5=fopen("optab.txt","r");        
                fscanf(fp5,"%s%s",mnemonic,code);
                while (strcmp(opcode, mnemonic) != 0)
                        fscanf(fp5,"%s%s",mnemonic,code);
                fscanf(fp2, "%s%d", symbol, &add);
                while (strcmp(operand, symbol) != 0)
                      fscanf(fp2, "%s%d", symbol, &add);
                fprintf(fp1, "%d\t%s\t%s\t%s\t%s%d\n", address, label, opcode, operand, code, add);
                fprintf(fp4, "^%s%d", code, add);
                fclose(fp2);
               fclose(fp5);
        }
       
            fscanf(fp3, "%d%s%s%s", &address, label, opcode, operand);
    }
    fprintf(fp1, "%d\t%s\t%s\t%s\n", address, label, opcode, operand);
    fprintf(fp4, "\nE^00%d", start);
    fclose(fp4);
    fclose(fp3);
    fclose(fp1);
    display();
   return 0;
}
void display() 
{
    char ch;
    FILE *fp1, *fp2, *fp3, *fp4;
    printf("\nIntermediate file is converted into object code");
    printf("\n\nThe contents of Intermediate file:\n\n");
    fp3 = fopen("intermediate.txt", "r");
    ch = fgetc(fp3);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp3);
    }
    fclose(fp3);
    printf("\n\nThe contents of Symbol Table :\n\n");
    fp2 = fopen("symtab.txt", "r");
    ch = fgetc(fp2);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp2);
    }
    fclose(fp2);
    printf("\n\nThe contents of Output file :\n\n");
    fp1 = fopen("output.txt", "r");
    ch = fgetc(fp1);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp1);
    }
    fclose(fp1);


    printf("\n\nThe contents of Object code file :\n\n");
    fp4 = fopen("objcode.txt", "r");
    ch = fgetc(fp4);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = fgetc(fp4);
    }
    fclose(fp4);
}
Output


Intermediate file is converted into object code


The contents of Intermediate file:


        **      START   2000
2000    **      LDA     FIVE
2003    **      STA     ALPHA
2006    **      LDCH    CHARZ
2009    **      STCH    C1
2012    ALPHA   RESW    2
2018    FIVE    WORD    5
2021    CHARZ   BYTE    C'Z'
2022    C1      RESB    1
2023    **      END     **




The contents of Symbol Table :


ALPHA   2012
FIVE    2018
CHARZ   2021
C1      2022




The contents of Output file :


        **      START   2000
2000    **      LDA     FIVE    032018
2003    **      STA     ALPHA   0f2012
2006    **      LDCH    CHARZ   532021
2009    **      STCH    C1      572022
2012    ALPHA   RESW    2
2018    FIVE    WORD    5       000005
2021    CHARZ   BYTE    C'Z'    5a
2022    C1      RESB    1
2023    **      END     **




The contents of Object code file :


H^**^002000^002023
T^002000^22^032018^0f2012^532021^572022^000005^5a
E^002000




2. Absolute Loader


#include<stdio.h>
#include<string.h>
#include<stdlib.h>
void main()
{
  FILE *fp;
  int i,addr1,l,j,staddr1;
  char name[10],line[50],name1[10],addr[10],rec[10],ch,staddr[10];
  printf("Enter the name of the program:" );
  scanf("%s",name);
  fp=fopen("objcode.txt","r");
  fscanf(fp,"%s",line);
  for(i=2,j=0;i<7;i++,j++)
          name1[j]=line[i];
    name1[j]='\0';
  printf("name from obj File. %s\n",name1);
  if(strcmp(name,name1)==0)//verify program name
  {
    do
    {
            fscanf(fp,"%s",line);
            if(line[0]=='T')
            {
                    for(i=2,j=0;i<8;i++,j++)//extract starting address from object file 
                        //which is stored from columns 2 to 7 in text record and store it in an array staddr and 
                        //convert into interger using atoi function
                            staddr[j]=line[i];
                    staddr[j]='\0';
                    staddr1=atoi(staddr);
                    i=12;//start object code from column 12
                    while(line[i]!='\0')
                    {
                      if(line[i]!='^')
                      {
                        printf("00%d \t %c%c\n", staddr1,line[i],line[i+1]);// each memory location stores 2 character
                        staddr1++;// increment memory address 
                        i=i+2;//move to next character
                      }
                      else i++;// if it is ^
                    }
                }
                else if(line[0]=='E') 
            {
                        printf("\nExecution address: ");
            for (i = 2; i < 8; i++)
                printf("%c", line[i]);
            break;
        }
        }
        while(!feof(fp));
  }        
  fclose(fp);
}


Input file
objcode.txt
H^FIRST^002000^002023
T^002000^22^032018^0f2012^532021^572022^000005^5a
E^002000
Output 
Enter the name of the program:FIRST
name from obj File. FIRST
002000   03
002001   20
002002   18
002003   0f
002004   20
002005   12
002006   53
002007   20
002008   21
002009   57
002010   20
002011   22
002012   00
002013   00
002014   05
002015   5a


Execution address: 002000




3. Relocating loader
4.
